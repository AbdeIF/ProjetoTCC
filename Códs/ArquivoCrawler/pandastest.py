# -*- coding: utf-8 -*-
"""PandasTest.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Rc7ER0fXyiDoyMEPgM6_sAZ3oj29svxl
"""

!pip install pandas

!pip install matplotlib

import pandas as pd
import matplotlib.pyplot as plt

dados = pd.read_csv('/content/dados_preprocessados.csv')

#Cria um Arquivo Excel:
  #dados.to_excel("dados_preprocessados.xlsx", sheet_name="Avaliação", index=False)

# seleção de colunas:
  #filt_colum = dados[['produto','sentimento']]

# seleção de linhas:
  #filt_lin = dados[dados["sentimento"] <= 0]

#selecionando linhas e colunas ao mesmo tempo:
  #filt = dados[(dados["produto"] == 'doce leite pastoso souvenir 800gr') & (dados["sentimento"] > 0)]
  #filt = dados.loc[dados["sentimento"] > 0, "produto"]
  #dados.iloc[:, 2:4]

#graficos com matplotlib:
  #dados.plot.box()


#Calculando estátisticas:
  # dados[["sentimento", "emoção"]].mean()
  # dados[["sentimento", "emoção"]].median()

import pandas as pd
import json
import re
import nltk
nltk.download('punkt')
nltk.download('stopwords')
nltk.download('rslp')  # Recurso para o stemmer (opcional)
nltk.download('vader_lexicon')  # Baixar o recurso vader_lexicon
from nltk.corpus import stopwords
from nltk.tokenize import word_tokenize
from nltk.sentiment.vader import SentimentIntensityAnalyzer
from nltk.stem import RSLPStemmer  # Importar o stemmer (opcional)

# Carregar o arquivo JSON
with open("avaliacoes.json", "r", encoding="utf-8") as file:
    avaliacoes_json = json.load(file)

# Criar um DataFrame a partir do JSON
df = pd.DataFrame(avaliacoes_json)

# Função para pré-processamento de texto em português
def preprocess_text_pt(text):
    # Converter para letras minúsculas
    text = text.lower()
    # Remover caracteres especiais e pontuações usando regex
    text = re.sub(r'[^\w\s]', '', text)
    # Tokenizar o texto em palavras
    words = word_tokenize(text)
    # Remover stop words (palavras irrelevantes) em português
    stop_words = set(stopwords.words('portuguese'))
    filtered_words = [word for word in words if word not in stop_words]

    # Opcional: Aplicar stemming em português usando RSLP
    stemmer = RSLPStemmer()
    stemmed_words = [stemmer.stem(word) for word in filtered_words]

    # Juntar as palavras novamente para formar o texto pré-processado
    preprocessed_text = ' '.join(stemmed_words) if stemmed_words else ''
    return preprocessed_text

# Aplicar o pré-processamento à coluna 'Avaliação' no DataFrame
df['Avaliação_preprocessada'] = df['Avaliação'].apply(preprocess_text_pt)

# Inicializar o SentimentIntensityAnalyzer
sia = SentimentIntensityAnalyzer()

# Definir função para obter o sentimento
def get_sentiment_score(text):
    # Obter o score de sentimento usando o SentimentIntensityAnalyzer
    sentiment_score = sia.polarity_scores(text)
    return sentiment_score

# Aplicar a análise de sentimentos ao texto pré-processado e criar colunas para os scores
df['sentimento_scores'] = df['Avaliação_preprocessada'].apply(get_sentiment_score)

# Extrair os scores de sentimento em colunas separadas
df['sentimento_negativo'] = df['sentimento_scores'].apply(lambda score: score['neg'])
df['sentimento_neutro'] = df['sentimento_scores'].apply(lambda score: score['neu'])
df['sentimento_positivo'] = df['sentimento_scores'].apply(lambda score: score['pos'])
df['sentimento_compound'] = df['sentimento_scores'].apply(lambda score: score['compound'])

# Salvar o DataFrame em um arquivo Excel:
  #df.to_excel('resultado_sentimento.xlsx', index=False)

# Exibir o DataFrame no terminal
df.head()


# Visualização: Contagem de sentimentos
def plot_sentiment_count():
    sentiment_labels = ['Negativo', 'Neutro', 'Positivo']
    sentiment_counts = [df['sentimento_negativo'].sum(), df['sentimento_neutro'].sum(), df['sentimento_positivo'].sum()]

    plt.figure(figsize=(8, 6))
    plt.bar(sentiment_labels, sentiment_counts, color='skyblue')
    plt.xlabel('Sentimentos')
    plt.ylabel('Contagem')
    plt.title('Contagem de Sentimentos')
    plt.show()

# Visualização: Sentimento Composto por Produto
def plot_sentiment_compound():
    plt.figure(figsize=(12, 6))
    plt.scatter(df['produto'], df['sentimento_compound'], color='orange', marker='o')
    plt.xlabel('Produto')
    plt.ylabel('Sentimento Composto')
    plt.title('Sentimento Composto por Produto')
    plt.xticks(rotation=45, ha='right')
    plt.grid(True, axis='y', linestyle='--')
    plt.show()

# Chamando as funções de visualização
plot_sentiment_count()
plot_sentiment_compound()